package ru.rdc.PrintTalon.controllers;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import ru.rdc.PrintTalon.dto.LabResultViewDto;
import ru.rdc.PrintTalon.dto.LabTestResultDto;
import ru.rdc.PrintTalon.model.Patient;
import ru.rdc.PrintTalon.repository.PatientRepository;
import ru.rdc.PrintTalon.services.LabResultService;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Controller
@RequiredArgsConstructor
public class LabResultsController {

    private final LabResultService labResultService;
    private final PatientRepository patientRepository;

    @GetMapping("/labresults")
    public String getLabResultsPage(HttpSession session, Model model) {

        if (session.getAttribute("patientId") == null) {
            return "redirect:/login?action=results";
        }

        Long patientId = (Long) session.getAttribute("patientId");

        Optional<Patient> patientOpt = patientRepository.findById(patientId);
        if (patientOpt.isEmpty()) return "redirect:/login";

        Patient patient = patientOpt.get();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∑–∞ —Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        LocalDate threeWeeksAgo = LocalDate.now().minusWeeks(3);
        LocalDate currentDate = LocalDate.now();

        model.addAttribute("patientName", session.getAttribute("patientName"));
        model.addAttribute("patientSnils", patient.getSnils());
        model.addAttribute("patientInfo", new Object()); // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É LabTestResultDto

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (YYYY-MM-DD)
        model.addAttribute("defaultFromDate", threeWeeksAgo.format(DateTimeFormatter.ISO_DATE));
        model.addAttribute("currentDate", currentDate.format(DateTimeFormatter.ISO_DATE));

        return "labresults";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –°–ù–ò–õ–° –∏ –¥–∞—Ç–µ.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
     *
     * @param date    –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
     * @param session HTTP-—Å–µ—Å—Å–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
     * @return        JSON-–æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: afp_hgch, vpch, regular –∏ –¥—Ä.
     */
    @GetMapping("/labresults/ajax")
    @ResponseBody
    public Map<String, List<Map<String, String>>> getLabResultsAjax(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            HttpSession session) {

        Long patientId = (Long) session.getAttribute("patientId");

        System.out.println("patientId = " + patientId);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞)
        Map<String, List<LabResultViewDto>> categorized = labResultService.getCategorizedResultsForView(patientId, date);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö DTO
        Map<String, List<Map<String, String>>> response = new LinkedHashMap<>();

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "vpch", "afp_hgch", "regular")
        categorized.forEach((category, list) -> {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π DTO –≤ Map<String, String>, —Ç.–∫. –∫–ª–∏–µ–Ω—Ç—É –Ω—É–∂–Ω—ã —Å—Ç—Ä–æ–∫–∏
            List<Map<String, String>> mappedList = list.stream().map(r -> {
                Map<String, String> map = new LinkedHashMap<>();
                map.put("ids", r.getIds());                    // ID –æ–±—Ä–∞–∑—Ü–∞
                map.put("material", r.getMaterial());          // –ú–∞—Ç–µ—Ä–∏–∞–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                map.put("otd", r.getOtd());                    // –û—Ç–¥–µ–ª–µ–Ω–∏–µ
                map.put("usl", r.getUsl());                    // –£—Å–ª—É–≥–∞
                map.put("collecdate", r.getCollecdate().toString()); // –î–∞—Ç–∞ –∑–∞–±–æ—Ä–∞
                map.put("finisdate", r.getFinisdate().toString());   // –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                return map;
            }).toList();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ—Ç–≤–µ—Ç
            response.put(category, mappedList);
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON (Spring —Å–∞–º —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç Map –≤ JSON)
        return response;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –°–ù–ò–õ–°, –¥–∞—Ç–µ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –æ–±—Ä–∞–∑—Ü–∞ (ids).
     *
     * @param snils     –°–ù–ò–õ–° –ø–∞—Ü–∏–µ–Ω—Ç–∞
     * @param date      –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
     * @param ids       –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–∑—Ü–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
     * @param response  HTTP-–æ—Ç–≤–µ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω PDF-—Ñ–∞–π–ª
     * @throws IOException –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞
     */
    @GetMapping("/labresults/print")
    public void printLabResults(
            @RequestParam String snils,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @RequestParam String ids,
            HttpSession session,
            HttpServletResponse response) throws IOException {

        Long patientId = (Long) session.getAttribute("patientId");

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –°–ù–ò–õ–° –∏ –¥–∞—Ç–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ids (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –æ–±—Ä–∞–∑—Ü–∞)
        List<LabTestResultDto> results = labResultService.findResultsByPatientIdAndDate(patientId, date)
                .stream()
                .filter(r -> r.getIds().equals(ids)) // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É
                .collect(Collectors.toList());

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–µ—á–∞—Ç—å
        log.info("üñ®Ô∏è –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –°–ù–ò–õ–°={}, –¥–∞—Ç–∞={}, IDS={}, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π={}",
                snils, date, ids, results.size());

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ‚Äî PDF-–¥–æ–∫—É–º–µ–Ω—Ç
        response.setContentType("application/pdf");

        // –£–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å PDF –≤–Ω—É—Ç—Ä–∏ –≤–∫–ª–∞–¥–∫–∏, –∞ –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –µ–≥–æ
        response.setHeader("Content-Disposition", "inline; filename=lab_results_" + ids + ".pdf");
    }
}